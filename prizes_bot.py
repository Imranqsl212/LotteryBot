import asyncio
import logging
import os
import random
import json
import string
import time
from contextlib import suppress
from datetime import datetime, timedelta, timezone
from aiogram.types import FSInputFile
from aiogram.filters import CommandStart
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from settings import crypto
from middlewares import SubChannelCheckPrize, get_need_to_pay_prize, AdminFilter
from src.panels.addons import keyboards, util
from src.panels.addons.config import bot_prize_link, channel_ids, prize_token, admin_ids
from src.panels.addons.states import *
from aiogram import F
import random

admin_filter = AdminFilter(admin_ids)
char_set = string.ascii_letters + string.digits + "!@#$%&*()_+-=[]{}|;:,.<>?/"
REF_REWARD = 5
DATABASE_PLAYERS = 'database/prizes_bot/players.json'

bot = Bot(prize_token)
dp = Dispatcher()

prizes: dict[str, float] = {}
players: dict[str, dict[str, int | str]] = {}

generated_tickets = set()

prize_distribution = {
    1: 20,
    2: 15,
    3: 12,
    4: 10,
    5: 8,
    6: 7,
    7: 6,
    8: 5,
    9: 4,
    10: 3
}


def generate_lottery_ticket(length=10):
    while True:
        ticket = ''.join(random.choices(char_set, k=length))
        if ticket not in generated_tickets:
            generated_tickets.add(ticket)
            return ticket


def save_if_not_exists(event: types.Message | types.CallbackQuery) -> None:
    if not players.get(str(event.from_user.id)):
        pattern = {
            'username': event.from_user.username,
            'namefamily': event.from_user.first_name,
            'ref': 0,
            'balance': 0,
            'not': 0,
            'lottery_balance': 0,
            'lottery_numbers': [],
            'daily_reward_amount': 1,
            'last_requested_for_daily': None,
            'done_task': 'false'
        }
        players[str(event.from_user.id)] = pattern
        return save_all_data()


def calculate_total_lottery_balance() -> int:
    return sum(player.get('lottery_balance', 0) for player in players.values() if isinstance(player, dict))


async def update_database() -> None:
    global prizes
    global players

    with open(DATABASE_PLAYERS, encoding='utf-8') as f:
        players = json.load(f)
        print('players –∑–∞–≥—Ä—É–∂–µ–Ω—ã')

    if any(k not in players for k in ('total_balance', 'total_lottery_balance')):
        players['total_balance'] = 0
        players['total_lottery_balance'] = 0

    for v in prizes.values():
        if isinstance(v, float) or isinstance(v, int): return

    prizes = {}

    nums = list(range(1, 10_000 + 1))
    random.shuffle(nums)

    num_tg = random.choice(nums)
    prizes[str(num_tg)] = 0.0007777
    nums.remove(num_tg)

    for n in nums:
        prizes[str(n)] = round(random.uniform(0.5, 1.1), 2)

    players['total_lottery_balance'] = calculate_total_lottery_balance()

    save_all_data()


@dp.message(lambda message: message.text in ('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞—á–∞—Ç—å'))
async def _main_menu(message: types.Message):
    return await message.answer(
        '‚å® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=keyboards.prizes_list
    )


@dp.callback_query(lambda query: query.data == 'check_sub')
async def _check_sub(callback_query: types.CallbackQuery) -> types.Message | bool:
    if not await util.is_subscribed(callback_query.from_user.id, bot, channel_ids):
        print('not')
        with suppress(Exception):
            return await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text=(
                        '–í—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n'
                        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ' + ', '.join(channel_ids)
                ),
                reply_markup=keyboards.check_subscribe_list
            )
        return await callback_query.answer('–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!', show_alert=True)

    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id
    )

    save_if_not_exists(callback_query)

    need_to_pay = get_need_to_pay_prize().get(callback_query.from_user.id)
    if need_to_pay:
        if players[str(callback_query.from_user.id)].get('already_ref', False):
            await callback_query.answer("‚ö† –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á—å—ë-—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!")
        elif not players.get(need_to_pay[0]):
            await callback_query.answer('‚ö† –ò–≥—Ä–æ–∫–∞, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤–∞—Å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        elif int(need_to_pay[0]) == callback_query.from_user.id:
            await callback_query.answer('‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!')
        else:
            await bot.send_message(
                chat_id=need_to_pay[0],
                text=f'üë• –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª ID: {callback_query.from_user.id}, –≤–∞—à –±–æ–Ω—É—Å {REF_REWARD} üéü —É–∂–µ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É!'
            )
            players[str(callback_query.from_user.id)]['already_ref'] = True
            ref_p = players[need_to_pay[0]]
            ref_p['balance'] += REF_REWARD
            ref_p['ref'] += 1

            save_all_data()

    return await bot.send_message(
        chat_id=callback_query.from_user.id,
        text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º! ‚úÖ',
        reply_markup=keyboards.prizes_list
    )


@dp.message(CommandStart())
async def start(message: types.Message) -> None:
    save_if_not_exists(message)

    if len(message.text) > 6:
        ref_id = message.text[7:]
        if players[str(message.chat.id)].get('already_ref', False):
            await message.answer("‚ö† –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á—å—ë-—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!")
        elif not players.get(ref_id):
            await message.answer('‚ö† –ò–≥—Ä–æ–∫–∞, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤–∞—Å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        elif int(ref_id) == message.from_user.id:
            await message.answer('‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!')
        else:
            await bot.send_message(
                chat_id=ref_id,
                text=f'üë• –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª ID: {message.chat.id}, –≤–∞—à –±–æ–Ω—É—Å {REF_REWARD} üéü —É–∂–µ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É!'
            )
            players[str(message.chat.id)]['already_ref'] = True
            ref_p = players[ref_id]
            ref_p['balance'] += REF_REWARD
            ref_p['ref'] += 1

            save_all_data()

    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! –í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–µ—Ç –≤–æ–∑–Ω–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º 0.0000 NOT. –í—Å—ë –∏–ª–∏ –Ω–∏—á–µ–≥–æ! –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç '
        '–ª–æ—Ç–µ—Ä–µ—è —Å 10 –ø—Ä–∏–∑–æ–≤—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –∏ —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –Ω–∞ NOT —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã '
        '–∏ –º–µ–Ω—è–π –∏—Ö –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–æ–Ω–µ—Ç. –í—ã–≤–æ–¥ –≤—ã–∏–≥—Ä—ã—à–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Crypto Bot, –ø–æ—ç—Ç–æ–º—É –∑–∞–±–∏—Ä–∞–π –µ–≥–æ –∫–æ–≥–¥–∞ —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ! '
        '–¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑–¥–µ–ª –∑–∞–¥–∞–Ω–∏—è –∏ —Ä–µ–π–¥—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Å–Ω–æ–≤–µ!'
    )

    await message.answer(
        "‚å® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=keyboards.prizes_list
    )


@dp.message(lambda message: message.text == 'üí≥ –í—ã–≤–æ–¥')
async def _vivod(message: types.Message) -> types.Message:
    if players[str(message.from_user.id)].get('not', 0) < 1:
        return await message.answer('–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç –±–∞–ª–∞–Ω—Å–∞ 1 –∏ –≤—ã—à–µ! ‚õî')

    transfer = crypto.transfer(
        message.from_user.id, 'NOT', str(players[str(message.from_user.id)]['not']),
        '{} {}'.format(
            message.from_user.id,
            datetime.strftime(datetime.now(), '%H-%M-%S-%d.%m')
        )
    )

    if not transfer['ok'] and transfer['error']['name'] == 'USER_NOT_FOUND':
        return await message.answer('–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ @CryptoBot ‚õî')

    if transfer['ok']:
        players[str(message.from_user.id)]['not'] = 0
        return await message.answer('–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –í–∞—à –∫–æ—à–µ–ª—ë–∫ –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ ‚úÖ')

    print(transfer['error'])
    return await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ :( üí•')


@dp.message(lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ üéü')
async def _referal_system(message: types.Message) -> types.Message:
    up = players[str(message.chat.id)]
    return await message.answer(
        f'''üí∞ –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ {REF_REWARD} üéü.

üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {up["ref"]}
üéØ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ üéü: {REF_REWARD * int(up["ref"])}

‚Äî –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {bot_prize_link.format(message.from_user.id)}'''
    )


@dp.message(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Ñπ')
async def _stats(message: types.Message) -> types.Message:
    return await message.answer(
        f"""üë§ –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(players) - 5} —á–µ–ª
üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {players.get('total_balance', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.. ‚õî')}
üì¶ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {players.get('total_lottery_balance', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.. ‚õî')}
        """
    )


@dp.message(lambda message: message.text == '–†–µ–π–¥—ã')
async def _lotery(message: types.Message):
    text = players['raides']['text']
    img_path = players['raides']['img']

    img = FSInputFile(img_path)

    await message.answer_photo(photo=img, caption=text)


@dp.message(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å ü§ë')
async def _profile(message: types.Message):
    user = players.get(str(message.from_user.id))
    if not user: return await message.answer('‚ö° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start')

    return await message.answer(
        f"üè∑ –í–∞—à ID: {message.from_user.id}\n\n–ë–∞–ª–∞–Ω—Å –±–∏–ª–µ—Ç–æ–≤: {user.get('balance', 0)} üéü\n"
        f"NOT: {user.get('not', 0)} \n"
        f"–ë–∞–ª–∞–Ω—Å –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {user.get('lottery_balance', 0)}\n",
        reply_markup=keyboards.vivod_list
    )


def save_all_data() -> None:
    with open(DATABASE_PLAYERS, 'w', encoding='utf-8') as f:
        json.dump(players, f, ensure_ascii=False, indent=4)


async def exchange_tickets(user_id: str, num_tickets: int):
    players[user_id]["lottery_balance"] += num_tickets
    players[user_id]["balance"] -= num_tickets

    players['total_lottery_balance'] += num_tickets
    save_all_data()


@dp.message(lambda message: message.text == '–õ–æ—Ç–µ—Ä–µ—è üéü')
async def lottery_handler(message: types.Message):
    sum = players['bank_balance']
    message1 = (f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –ª–æ—Ç–µ—Ä–µ–µ! –°—É—Ç—å –ª–æ—Ç–µ—Ä–µ–∏ –ø—Ä–æ—Å—Ç–∞ ‚Äì —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–π 1 –±–∏–ª–µ—Ç –Ω–∞ 1 '
                f'–ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ö–∞–∂–¥—ã–π –±–∏–ª–µ—Ç = 1 —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É. –ö–∞–∂–¥–æ–º—É –æ–±–º–µ–Ω—è–Ω–Ω–æ–º—É –±–∏–ª–µ—Ç—É '
                f'–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏ —Ä–æ–≤–Ω–æ –≤ 20:00 –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. '
                f'–ü–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ–±–º–µ–Ω—è–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã —Å–≥–æ—Ä–∞—é—Ç. '
                f'–û–±—â–∏–π –±–∞–Ω–∫: {sum}\n'
                f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤:\n'
                f'1-–µ –º–µ—Å—Ç–æ: {prize_distribution[1]}% ({sum * prize_distribution[1] / 100} NOT.)\n'
                f'2-–µ –º–µ—Å—Ç–æ: {prize_distribution[2]}% ({sum * prize_distribution[2] / 100} NOT)\n'
                f'3-–µ –º–µ—Å—Ç–æ: {prize_distribution[3]}% ({sum * prize_distribution[3] / 100} NOT)\n'
                f'4-–µ –º–µ—Å—Ç–æ: {prize_distribution[4]}% ({sum * prize_distribution[4] / 100} NOT)\n'
                f'5-–µ –º–µ—Å—Ç–æ: {prize_distribution[5]}% ({sum * prize_distribution[5] / 100} NOT.)\n'
                f'6-–µ –º–µ—Å—Ç–æ: {prize_distribution[6]}% ({sum * prize_distribution[6] / 100} NOT)\n'
                f'7-–µ –º–µ—Å—Ç–æ: {prize_distribution[7]}% ({sum * prize_distribution[7] / 100} NOT)\n'
                f'8-–µ –º–µ—Å—Ç–æ: {prize_distribution[8]}% ({sum * prize_distribution[8] / 100} NOT)\n'
                f'9-–µ –º–µ—Å—Ç–æ: {prize_distribution[9]}% ({sum * prize_distribution[9] / 100} NOT)\n'
                f'10-–µ –º–µ—Å—Ç–æ: {prize_distribution[10]}% ({sum * prize_distribution[10] / 100} NOT)\n')
    await message.answer(message1, reply_markup=keyboards.lot)


@dp.callback_query(lambda query: query.data.startswith('show_tickets'))
async def asks(callback_query: types.CallbackQuery, state: FSMContext):
    user = players.get(str(callback_query.from_user.id))
    lottery_numbers = user.get("lottery_numbers", [])
    lottery_numbers_str = "\n".join(map(str, lottery_numbers))
    if not user: return await callback_query.answer('‚ö° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start')

    return await callback_query.message.answer(
        f'–í–∞—à–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à: \n {lottery_numbers_str}\n',
    )


@dp.callback_query(lambda query: query.data.startswith('exchange_tickets'))
async def process_exchange_tickets(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(ExchangeTicketsStates.waiting_for_tickets)

    await bot.send_message(callback_query.from_user.id, "–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å?")


@dp.message(ExchangeTicketsStates.waiting_for_tickets)
async def exchange_tickets_message_handler(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    try:
        num_tickets = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return await state.clear()

    user_balance = players[user_id]['balance']
    if num_tickets > user_balance:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return await state.clear()
    if num_tickets < 0:
        return await message.answer('–í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
    await exchange_tickets(user_id, num_tickets)
    for i in range(players[user_id]['lottery_balance']):
        gen_tick = generate_lottery_ticket()
        players[user_id]['lottery_numbers'].append(gen_tick)
    players[user_id]['lottery_balance'] -= num_tickets
    save_all_data()

    await state.clear()
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {num_tickets} –±–∏–ª–µ—Ç–æ–≤.", reply_markup=keyboards.prizes_list)


@dp.message(lambda message: message.text == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã üéü')
async def _dailyticket(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    last_requested = players[user_id]['last_requested_for_daily']

    if last_requested:
        current_time = datetime.now()
        time_since_last_request = current_time - datetime.strptime(last_requested, '%Y-%m-%d %H:%M:%S.%f')

        if time_since_last_request < timedelta(hours=24):
            time_left = timedelta(hours=24) - time_since_last_request
            hours_left = time_left.seconds // 3600
            minutes_left = (time_left.seconds % 3600) // 60
            seconds_left = time_left.seconds % 60
            await message.answer(
                f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ {hours_left} —á–∞—Å–æ–≤ {minutes_left} –º–∏–Ω—É—Ç {seconds_left} —Å–µ–∫—É–Ω–¥.")
            return

    await message.answer(f'''–ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ!
        –ü–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–¥–µ–ª –∑–∞–¥–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è!
        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –í—ã –ø–æ–ª—É—á–∏—Ç–µ {players[user_id]['daily_reward_amount']}
    ''', reply_markup=keyboards.daily)
    await state.set_state(DailyTicketsStates.REQUESTED)


@dp.callback_query(lambda query: query.data == 'get_daily_tickets', DailyTicketsStates.REQUESTED)
async def process_get_daily_tickets(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã!")
    user_id = str(callback_query.from_user.id)

    if user_id in players:
        players[user_id]['balance'] += players[user_id]['daily_reward_amount']
        current_time = datetime.now()
        players[user_id]['last_requested_for_daily'] = current_time.strftime('%Y-%m-%d %H:%M:%S.%f')

    await state.clear()
    save_all_data()


############################################################################################

@dp.message(lambda message: message.text == '/admin')
async def admin_panel(message: types.Message, state: FSMContext):
    if not admin_filter(message):
        return await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!')
    else:
        return await message.answer('–£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É', reply_markup=keyboards.admin_list)


@dp.message(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def _addbalance(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.')
    await state.set_state(AddBalance.ID)


@dp.message(AddBalance.ID)
async def process_addbalance(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    await state.update_data(user_id=user_id)
    if players.get(user_id):
        await state.set_state(AddBalance.AMOUNT)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å.')

    else:
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω ')
        await state.clear()


@dp.message(AddBalance.AMOUNT)
async def process_addbalance_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
    except Exception as e:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å.')
        await state.clear()

    data = await state.get_data()
    user_id = data['user_id']

    players[user_id]['not'] += amount
    save_all_data()

    await state.clear()
    await message.answer(f'–°—É–º–º–∞ {amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.')


@dp.message(lambda message: message.text == '–°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å')
async def _decreasebalance(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞.')
    await state.set_state(DEACREASE.ID)


@dp.message(DEACREASE.ID)
async def process_decreasebalance(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    await state.update_data(user_id=user_id)
    if players[user_id]:

        await state.set_state(DEACREASE.AMOUNT)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞.')
    else:
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω ')
        await state.clear()


@dp.message(DEACREASE.AMOUNT)
async def process_decreasebalance_amount(message: types.Message, state: FSMContext):
    global a
    try:
        a = int(message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞.')
        await state.clear()

    data = await state.get_data()
    user_id = data['user_id']

    players[user_id]['not'] -= a
    save_all_data()

    await state.clear()
    await message.answer(f'–°—É–º–º–∞ {a} —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.')


@dp.message(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑–æ–≤–æ–π –±–∞–Ω–∫ –≤ –ª–æ—Ç–µ—Ä–µ–µ')
async def _changebnkbalance(message: types.Message, state: FSMContext):
    await message.answer('–í–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–Ω–∫–∞ –≤ NOT')
    await state.set_state(AdminStates.ChangingPrizeBank)


@dp.message(AdminStates.ChangingPrizeBank)
async def process_changing_bank_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        players['bank_balance'] = amount
        await state.clear()
        save_all_data()
        await message.answer('–£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –ø—Ä–∏–∑–æ–≤–æ–π –±—é–¥–∂–µ—Ç')
    except Exception as e:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ. –û—à–∏–±–∫–∞ {e}')
        await state.clear()
        return


@dp.message(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ –∑–∞–¥–∞–Ω–∏–π')
async def _delchannel(message: types.Message, state: FSMContext):
    players['task_channels'] = []
    save_all_data()
    await message.answer('–ö–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π')


@dp.message(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –∑–∞–¥–∞–Ω–∏—è')
async def _addchannel(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–∫–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å\n'
                         '@channel,@channel2\n'
                         '–ï—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å @')
    await state.set_state(AdminStates.AddingTaskChannel)


@dp.message(AdminStates.AddingTaskChannel)
async def process_task_channel(message: types.Message, state: FSMContext):
    channel_names = [channel.strip() for channel in message.text.split(',')]
    id_list = [key for key in players.keys() if key.isdigit()]
    added_channels = []
    for channel_name in channel_names:
        if not channel_name.startswith('@'):
            await message.answer(f"–û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª {channel_name} –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'.")
            await state.clear()

        added_channels.append(channel_name)

    if not added_channels:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()
        return

    print(added_channels)

    players['task_channels'] += added_channels
    save_all_data()
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–Ω–∞–ª—ã: {', '.join(added_channels)}")
    await state.clear()
    for i in id_list:
        if players[str(i)]['done_task'] == 'true':
            players[str(i)]['done_task'] = 'false'
            save_all_data()


@dp.message(lambda message: message.text == '–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ–π–¥—ã')
async def _raides_change_text(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–π–¥–∞')
    await state.set_state(ModifyRaides.SETTEXT)


@dp.message(ModifyRaides.SETTEXT)
async def _set_raides_text(message: types.Message, state: FSMContext):
    players['raides']['text'] = message.text
    save_all_data()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–µ–π–¥–∞')
    await state.set_state(ModifyRaides.SETIMAGE)


@dp.message(ModifyRaides.SETIMAGE, F.photo)
async def _set_raides_image(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path

    directory = "images"
    if not os.path.exists(directory):
        os.makedirs(directory)

    destination = f"{directory}/{file_path.split('/')[-1]}"
    await bot.download_file(file_path, destination)

    players['raides']['img'] = destination
    await state.clear()
    save_all_data()
    await message.reply("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ–π–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


def extract_lottery_info(data):
    lottery_data = []
    for user_id, user_info in data.items():
        if user_id not in ["total_balance", "total_lottery_balance", "task_channels", "raides", "bank_balance"]:
            if "lottery_numbers" in user_info:
                lottery_data.append({
                    "username": user_info["username"],
                    "id": user_id,
                    "lottery_numbers": user_info["lottery_numbers"]
                })
    return lottery_data


def get_top_10_lottery_numbers(lottery_numbers):
    if len(lottery_numbers) < 10:
        print("Not enough lottery numbers for top 10")
        return []
    return random.sample(lottery_numbers, 10)


async def send_lottery_ended_message():
    id_list = [key for key in players.keys() if key.isdigit()]
    all_lottery = extract_lottery_info(players)
    top = get_top_10_lottery_numbers(all_lottery)
    if not top:
        return

    total_bank = players["bank_balance"]
    message = f'–õ–æ—Ç–µ—Ä–µ—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n\n–¢–æ–ø 10:\n'
    for idx, user in enumerate(top):
        place = idx + 1
        percentage = prize_distribution.get(place, 0)
        prize = (total_bank * percentage) / 100
        message += f"- –ò–º—è: {user['username']}, ID: {user['id']}, –ü—Ä–∏–∑: {prize}\n"
        players[user['id']]['not'] = players.get(user['id'], {}).get('not', 0) + prize
        save_all_data()

    for i in id_list:
        await bot.send_message(chat_id=i, text=message)

    for i in id_list:
        players[str(i)]['lottery_numbers'] = []
        save_all_data()


@dp.message(lambda message: message.text == '–ó–∞–¥–∞–Ω–∏—è üíµ')
async def _tasks(message: types.Message, state: FSMContext):
    await message.answer(
        f'–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤. –ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ 5 –±–∏–ª–µ—Ç–æ–≤ –±–æ–ª—å—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!'
        f'–°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {players[str(message.from_user.id)]["daily_reward_amount"]} –±–∏–ª–µ—Ç–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ ',
        reply_markup=keyboards.task)


@dp.callback_query(lambda query: query.data == 'start_task')
async def _check_task2(query: types.CallbackQuery):
    a = query.from_user.id
    if players[str(a)]['done_task'] == 'false':
        task_channels = players.get("task_channels", [])
        await query.message.answer('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ' + ', '.join(task_channels),
                                   reply_markup=keyboards.check_subscribe_list2)
    else:
        await query.message.answer('–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º, –∂–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ')


########################################################################################################################################################################################################


@dp.callback_query(lambda query: query.data == 'check_sub2')
async def _check_sub(callback_query: types.CallbackQuery) -> types.Message | bool:
    channel_id = players['task_channels']
    uid = callback_query.from_user.id
    print(type(channel_id))
    if not await util.is_subscribed(uid, bot, channel_id):
        print('not')
        with suppress(Exception):
            return await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text=(
                        '–í—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n'
                        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ' + ', '.join(channel_id)
                ),
                reply_markup=keyboards.check_subscribe_list2
            )
        return await callback_query.answer('–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!', show_alert=True)

    players[str(uid)]['daily_reward_amount'] += 5
    players[str(uid)]['done_task'] = 'true'
    save_all_data()
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id
    )
    await callback_query.message.answer(f'–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤—ã—Ä–æ—Å –¥–æ {players[str(uid)]["daily_reward_amount"]} ')


##################################################


async def main():
    await update_database()
    scheduler = AsyncIOScheduler()
    scheduler.start()
    scheduler.add_job(send_lottery_ended_message, 'cron', hour=23, minute=00)
    logging.basicConfig(level=logging.INFO)
    dp.message.outer_middleware(SubChannelCheckPrize())
    print('[ PRIZES –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ]')
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
